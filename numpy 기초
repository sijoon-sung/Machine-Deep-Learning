{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOzifNH/VDCpX47jEbhuQbS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sijoon-sung/Machine-Deep-Learning/blob/main/numpy%20%EA%B8%B0%EC%B4%88\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jNWpWwDGeXIs"
      },
      "outputs": [],
      "source": [
        "import numpy as np  #넘파이라이브러리 불러오기"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def print_obj(obj,name): #객체의 이름을 입력하면 출력하는 함수 정의\n",
        "  print(\"%s:\\n%s\\n\" % (name,obj))\n"
      ],
      "metadata": {
        "id": "u5FO-qPlinE7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "array0 = np.array(1.) #0차원벡터\n",
        "array1 = np.array([1.,2.,3.]) # 1차원 배열, 벡터\n",
        "array2 = np.array([[1.,2.,3.],[4.,5.,6.]]) #2차원 배열, 행렬\n",
        "\n",
        "print_obj(array0,\"스칼라\")\n",
        "print_obj(array1,\"벡터\")\n",
        "print_obj(array2,\"행렬\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_p_q6ApJi2ya",
        "outputId": "59a1e6f3-e514-482e-8d11-badabfb6e8f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "스칼라:\n",
            "1.0\n",
            "\n",
            "벡터:\n",
            "[1. 2. 3.]\n",
            "\n",
            "행렬:\n",
            "[[1. 2. 3.]\n",
            " [4. 5. 6.]]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#정의한 스칼라, 벡터, 행렬의 차원을 출력\n",
        "print_obj(array0.ndim,\"스칼라의 차원\")\n",
        "print_obj(array1.ndim,\"벡터의 차원\")\n",
        "print_obj(array2.ndim,\"행렬의 차원\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJC8inBPjV-e",
        "outputId": "7fe9920f-db24-4873-ef3a-721e0a14989e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "스칼라의 차원:\n",
            "0\n",
            "\n",
            "벡터의 차원:\n",
            "1\n",
            "\n",
            "행렬의 차원:\n",
            "2\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#shape 함수 - 모양 형태를 보여줌 3*1\n",
        "print_obj(array0.shape,\"스칼라의 모양\")\n",
        "print_obj(array1.shape,\"벡터의 모양\") #3*1\n",
        "print_obj(array2.shape,\"행렬의 모양\") # 2*3\n",
        "\n",
        "array3 = np.array([[1,2,3]])\n",
        "print_obj(array3.shape,\"array3의 모양\") # 1* 3\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5UtjLtDlXQd",
        "outputId": "09ab16b1-8f81-4fe7-f7e4-74cc4de7be32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "스칼라의 모양:\n",
            "()\n",
            "\n",
            "벡터의 모양:\n",
            "(3,)\n",
            "\n",
            "행렬의 모양:\n",
            "(2, 3)\n",
            "\n",
            "array3의 모양:\n",
            "(1, 3)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3차원 이상은 텐서\n",
        "tensor1 = np.array([[[1.,2.,3.],[4.,5.,6.]],[[7.,8.,9.],[10.,11.,12.]]])\n",
        "tensor2 = np.array([\n",
        "    [\n",
        "        [[1., 2., 3.], [1., 2., 3.]],\n",
        "        [[4., 5., 6.], [4., 5., 6.]]\n",
        "    ],\n",
        "    [\n",
        "        [[7., 8., 9.], [10., 11., 12.]],\n",
        "        [[7., 8., 9.], [10., 11., 12.]]\n",
        "    ]\n",
        "])\n",
        "\n",
        "print_obj(tensor1,\"tensor1\")\n",
        "print_obj(tensor1.ndim,\"tensor1.ndim\") #안에 있는  []의 갯수를 세자 -3\n",
        "print_obj(tensor1.shape,\"tensor1.shape\")\n",
        "\n",
        "'''\n",
        "최상위 차원: 2개의 요소 ([[...], [...]] 2개 있음).\n",
        "중간 차원: 각 요소는 2개의 행을 가짐.\n",
        "가장 안쪽 차원: 각 행은 3개의 열(숫자)을 가짐.\n",
        "따라서 tensor1.shape = (2, 2, 3)\n",
        "'''\n",
        "\n",
        "print_obj(tensor2,\"tensor2\")\n",
        "print_obj(tensor2.ndim,\"tensor2.ndim\")#4\n",
        "print_obj(tensor2.shape,\"tensor2.shape\")\n",
        "\n",
        "'''\n",
        "최상위 차원: 2개의 3D 배열.\n",
        "두 번째 차원: 각 3D 배열에 2개의 2D 배열.\n",
        "세 번째 차원: 각 2D 배열에 2개의 행.\n",
        "네 번째 차원: 각 행에 3개의 열.\n",
        "따라서 tensor2.shape = (2, 2, 2, 3).\n",
        "'''\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "VRW3wldvmmZW",
        "outputId": "2b63379c-18c4-40c4-ec9e-c94afe1abfcd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor1:\n",
            "[[[ 1.  2.  3.]\n",
            "  [ 4.  5.  6.]]\n",
            "\n",
            " [[ 7.  8.  9.]\n",
            "  [10. 11. 12.]]]\n",
            "\n",
            "tensor1.ndim:\n",
            "3\n",
            "\n",
            "tensor1.shape:\n",
            "(2, 2, 3)\n",
            "\n",
            "tensor2:\n",
            "[[[[ 1.  2.  3.]\n",
            "   [ 1.  2.  3.]]\n",
            "\n",
            "  [[ 4.  5.  6.]\n",
            "   [ 4.  5.  6.]]]\n",
            "\n",
            "\n",
            " [[[ 7.  8.  9.]\n",
            "   [10. 11. 12.]]\n",
            "\n",
            "  [[ 7.  8.  9.]\n",
            "   [10. 11. 12.]]]]\n",
            "\n",
            "tensor2.ndim:\n",
            "4\n",
            "\n",
            "tensor2.shape:\n",
            "(2, 2, 2, 3)\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\n최상위 차원: 2개의 3D 배열.\\n두 번째 차원: 각 3D 배열에 2개의 2D 배열.\\n세 번째 차원: 각 2D 배열에 2개의 행.\\n네 번째 차원: 각 행에 3개의 열.\\n따라서 tensor2.shape = (2, 2, 2, 3).\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#numpy 배열\n",
        "#원소 가 1이고 크기가 10인 벡터\n",
        "ones = np.ones(10)\n",
        "print_obj(ones,\"np.ones\")\n",
        "\n",
        "zeros = np.zeros((2,5))\n",
        "print_obj(zeros,\"np.zeros\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "93piQ9Jhp0Ri",
        "outputId": "1d89c609-50f7-489c-af4f-5d6a35874aaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "np.ones:\n",
            "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            "\n",
            "np.zeros:\n",
            "[[0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#파라미터의 배열의 크기와 값을 입력한다\n",
        "#입력된 크기만큼의 배열을 만들고 입력한 값으로 배열을 채운다\n",
        "\n",
        "full = np.full((2,5),3) #배열\n",
        "print_obj(full,\"np.full\")\n",
        "\n",
        "full2 = np.full((3,2,1),-1)\n",
        "print_obj(full2,\"np.full2\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ERGWC3WPs7yy",
        "outputId": "9f16ac93-64ed-4f2e-d975-4b3af66628dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "np.full:\n",
            "[[3 3 3 3 3]\n",
            " [3 3 3 3 3]]\n",
            "\n",
            "np.full2:\n",
            "[[[-1]\n",
            "  [-1]]\n",
            "\n",
            " [[-1]\n",
            "  [-1]]\n",
            "\n",
            " [[-1]\n",
            "  [-1]]]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random = np.random.random((2,3,4))\n",
        "print_obj(random,\"np.random.random\")\n",
        "#2*3*4인 행렬을 셍성 random 값으로 0-1사이의 무작위 값 생성\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OKKu92egu8xz",
        "outputId": "bf011666-242a-4d47-eec5-a737fb4051cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "np.random.random:\n",
            "[[[0.75238464 0.56019676 0.17217643 0.88247432]\n",
            "  [0.14014611 0.83411497 0.71528101 0.31368139]\n",
            "  [0.87903763 0.54341766 0.19532072 0.11241521]]\n",
            "\n",
            " [[0.31995146 0.89353573 0.21918675 0.26189893]\n",
            "  [0.46232426 0.86686852 0.73896469 0.02453853]\n",
            "  [0.99214763 0.86223368 0.40336853 0.05467112]]]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arrange = np.arange(10).astype(float)\n",
        "print_obj(arrange,\"np.arrange\")\n",
        "#0-9까지의 수로 되어 있는 배열을 생성한 후에 그 배열의 원소값을 float로 변환해준다"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "id": "q2cGhdj7vMq-",
        "outputId": "a292856d-5f40-404b-80c4-2af784a605aa"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'print_obj' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-05c3115b281f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0marrange\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint_obj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrange\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"np.arrange\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m#0-9까지의 수로 되어 있는 배열을 생성한 후에 그 배열의 원소값을 float로 변환해준다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'print_obj' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 모듈과 패키지\n"
      ],
      "metadata": {
        "id": "Zi0eyuvPbIvn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "모듈은 변수 함수 클래스를 담고 있는 파일(.py)\n",
        "import 모듈\n",
        "\n",
        "모듈.변수\n",
        "모듈.함수"
      ],
      "metadata": {
        "id": "f7tca1rEbN_d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import torch"
      ],
      "metadata": {
        "id": "uOEL91AcbLAs"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import math #math 모듈\n",
        "print(math.pi)\n",
        "print(math.sqrt(4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_0eNuwfeb10Z",
        "outputId": "c6189c8c-0ace-4450-d03d-f7c2bc418fe4"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n",
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#as 함수\n",
        "import math as m\n",
        "print(m.pi)\n",
        "print(m.sqrt(4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bjFeI-n3cFRQ",
        "outputId": "2d67bb9a-4e36-4aa3-c2e6-cc420f7eef7e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n",
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import pi, sqrt\n",
        "print(pi)\n",
        "print(sqrt(4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bpxAvHZEcRQg",
        "outputId": "c4d53927-b695-4616-b1cf-125ee1edd21c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n",
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import *\n",
        "print(pi)\n",
        "print(sqrt(4))\n",
        "print(sin(pi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p5u77LjFcm4b",
        "outputId": "62ff9a40-54a4-40f0-87e0-32874b788aa0"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n",
            "2.0\n",
            "1.2246467991473532e-16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import 패키지.모듈\n",
        "#import 패키지.모듈1, 패키지.모듈2"
      ],
      "metadata": {
        "id": "yes0YpsedCif"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np #numpy는 라이브러리(패키지+모듈) numerical python\n",
        "a=np.array([1,2,3])\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pa9OXixKdQYq",
        "outputId": "a671c3fe-8d6a-4e50-e887-5d6043be0f10"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy.random\n",
        "print(numpy.random.random())\n",
        "print(numpy.random.randn(3,3))#3*3 짜리 random 값"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eDr-ujkDdefB",
        "outputId": "4c9706d1-8f32-4ed4-c365-aba46dcdf6f0"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9615157882885761\n",
            "[[ 3.24637455 -0.56783376 -1.10041824]\n",
            " [-0.03902488  1.95155997  1.17540552]\n",
            " [-0.23949519 -0.5848528  -0.67518556]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy.random as nr\n",
        "print(randn(3,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "id": "qtZ4YuszfdMY",
        "outputId": "1cbe2497-f84a-4b30-e3db-bc576bdf4d3e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'randn' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-681da903495b>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'randn' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QSMmL9xtfnGe"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}